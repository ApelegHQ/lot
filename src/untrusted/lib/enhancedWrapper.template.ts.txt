/* Copyright Â© 2023 Exact Realty Limited.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

// TODO: Use this to directly generate the code used instead of manually
// hardcoding the result.
// Using this file to generate code is challenging because it cannot be
// modified much by the generator (e.g., some variable names should not be
// changed, the structure and scopes should not be changed, etc.)

type TThisType = {
	['__canary$$CANARY_MID__']?: string;
	['__canary$zzby$f__']?: object;
};

// Note: CANARY_??? values need to be replaced by ${canary???}

declare let __FIX_GLOBALS__: { (): void };
declare let __USER_TEXT__: { (): void };
declare let __EMIT_TEMPLATE_GUARD__: { (): void }; // The literal '\r\n/*`*/'
declare let __DYNAMIC_GUARD_USER_TEXT__: { <T>(fn: T): T };

if (__buildtimeSettings__.dynamicCodeGeneration) {
	// eslint-disable-next-line no-with
	with (this as unknown as TThisType) {
		if (__buildtimeSettings__.fixGlobalTypes) {
			__FIX_GLOBALS__();
		}
		(function () {
			'use strict';
			// The canary is an additional mechanism to ensure that if the
			// code after 'script' is skipped, it will throw because it
			// doesn't know the variable name or its contents, even if it
			// managed to guess the guardCount variable
			const __canary$$CANARY_START__ = function (_) {
				_ = '${canaryEnd}';
				return function () {
					this.__canary$$CANARY_MID__ = _;
				}.bind(this);
			}.call(this);
			// The guard makes it difficult for the script to execute code
			// outside of the 'with' block by having it guess the correct
			// number of parentheses it needs to inject. Since guardCount
			// is random, it cannot be guessed deterministically.
			__DYNAMIC_GUARD_USER_TEXT__(
				// Function arguments to shadow canary values
				function (
					__canary$$CANARY_START__?: never,
					__canary$$CANARY_MID__?: never,
				) {
					void __canary$$CANARY_START__;
					void __canary$$CANARY_MID__;
					__USER_TEXT__();
					// Prevent the script from excluding the following code
					// via comments or template strings
					__EMIT_TEMPLATE_GUARD__();
				},
			).call(globalThis);
			__canary$$CANARY_START__();
		}).call(this);
	}

	if (
		'CANARY_END' !==
		(this as unknown as TThisType)['__canary$$CANARY_MID__']
	) {
		throw '__canary__';
	}

	delete (this as unknown as TThisType)['__canary$$CANARY_MID__'];
} else {
	const __canary$zzby$t__ = function (this: TThisType, _?: object) {
		_ = {};
		this['__canary$zzby$f__'] = _;
		return function (this: TThisType) {
			return _ !== this['__canary$zzby$f__'];
		};
	}.call(this as unknown as TThisType);
	// Outer function shadows __canary$zzby$t__ to avoid
	// reassignment of the trap function (like using `const`)
	// eslint-disable-next-line no-shadow-restricted-names
	(function (this: TThisType, __canary$zzby$t__?: never, arguments?: never) {
		void __canary$zzby$t__;
		void arguments;
		// eslint-disable-next-line no-with
		with (this) {
			if (__buildtimeSettings__.fixGlobalTypes) {
				__FIX_GLOBALS__();
			}
			(function () {
				'use strict';
				// The canary is an additional mechanism to ensure that if the
				// code after 'script' is skipped, it will throw because it
				// doesn't know the variable name or its contents, even if it
				// managed to guess the guardCount variable
				const __canary$zzby$s__ = function (_) {
					delete this['__canary$zzby$f__'];
					return function () {
						this['__canary$zzby$f__'] = _;
						_ = void 0;
					}.bind(this);
				}.call(this, this['__canary$zzby$f__']);
				// No parenthesis-based guard when not using dynamic code
				// generation (single parenthesis pair used)
				// Function arguments to shadow canary values
				(function (
					__canary$zzby$s__?: never,
					__canary$zzby$f__?: never,
				) {
					void __canary$zzby$s__;
					void __canary$zzby$f__;
					__USER_TEXT__();
					// Prevent the script from excluding the following code
					// via comments or template strings
					__EMIT_TEMPLATE_GUARD__();
				}).call(globalThis);
				__canary$zzby$s__();
			}).call(this);
		}
	}).call(this as unknown as TThisType);

	if (__canary$zzby$t__.call(this as unknown as TThisType)) {
		throw '__canary__';
	}

	delete (this as unknown as TThisType)['__canary$zzby$f__'];
}
